//! Substrate Node Template CLI library.

#![warn(missing_docs)]
#![warn(unused_extern_crates)]

mod chain_spec;
mod service;
mod cli;
//use std::thread;

//use parity_ethereum::{Ethereum, Configuration, Args as Ethereum_args};

pub use substrate_cli::{VersionInfo, IntoExit, error};


//fn parse_cli(args: Vec<String>) -> (Configuration, Vec<String>) {
//  let mut eth_chain = String::from("");
//  let mut eth_base_path = String::from("");
//  let mut removed: Vec<usize> = vec![];
//  for i in 0..args.len() {
//    match args.get(i).unwrap() {
//      arg if arg.eq( "--eth-chain" ) => {
//        eth_chain = args.get(i + 1).unwrap().to_string();
//        removed.push(i);
//        removed.push(i + 1);
//      },
//      arg if arg.eq("--eth-base-path") => {
//        eth_base_path = args.get(i + 1).unwrap().to_string();
//        removed.push(i);
//        removed.push(i + 1);
//      },
//      _ => ()
//    }
//  }
//
//  let conf_args = Ethereum_args {
//    cmd_daemon: false,
//    arg_daemon_pid_file: None,
//    cmd_account: false,
//    cmd_account_new: false,
//    cmd_account_list: false,
//    cmd_account_import: false,
//    arg_account_import_path: None,
//    cmd_wallet: false,
//    cmd_wallet_import: false,
//    arg_wallet_import_path: None,
//    cmd_import: false,
//    arg_import_format: None,
//    arg_import_file: None,
//    cmd_export: false,
//    cmd_export_blocks: false,
//    arg_export_blocks_format: None,
//    arg_export_blocks_from: "1".to_string(),
//    arg_export_blocks_to: "latest".to_string(),
//    arg_export_blocks_file: None,
//    cmd_export_state: false,
//    flag_export_state_no_storage: false,
//    flag_export_state_no_code: false,
//    arg_export_state_min_balance: None,
//    arg_export_state_max_balance: None,
//    arg_export_state_at: "latest".to_string(),
//    arg_export_state_format: None,
//    arg_export_state_file: None,
//    cmd_signer: false,
//    cmd_signer_new_token: false,
//    cmd_signer_list: false,
//    cmd_signer_sign: false,
//    arg_signer_sign_id: None,
//    cmd_signer_reject: false,
//    arg_signer_reject_id: None,
//    cmd_snapshot: false,
//    arg_snapshot_at: "latest".to_string(),
//    arg_snapshot_file: None,
//    cmd_restore: false,
//    arg_restore_file: None,
//    cmd_tools: false,
//    cmd_tools_hash: false,
//    arg_tools_hash_file: None,
//    cmd_db: false,
//    cmd_db_kill: false,
//    cmd_db_reset: false,
//    arg_db_reset_num: 10,
//    cmd_export_hardcoded_sync: false,
//    cmd_dapp: false,
//    arg_dapp_path: None,
//    flag_no_download: false,
//    flag_no_consensus: false,
//    flag_light: true,
//    flag_no_hardcoded_sync: false,
//    flag_force_direct: false,
//    arg_mode: "last".to_string(),
//    arg_mode_timeout: 300,
//    arg_mode_alarm: 3600,
//    arg_auto_update: "critical".to_string(),
//    arg_auto_update_delay: 100,
//    arg_auto_update_check_frequency: 20,
//    arg_release_track: "current".to_string(),
//    arg_chain: eth_chain,
//    arg_keys_path: "$BASE/keys".to_string(),
//    arg_identity: "".to_string(),
//    arg_base_path: Some(eth_base_path),
//    arg_db_path: None,
//    flag_unsafe_expose: false,
//    arg_config: "$BASE/config.toml".to_string(),
//    arg_ports_shift: 0,
//    flag_fast_unlock: false,
//    arg_keys_iterations: 10240,
//    arg_accounts_refresh: 5,
//    arg_unlock: None,
//    arg_password: [].to_vec(),
//    flag_private_enabled: false,
//    flag_private_state_offchain: false,
//    arg_private_signer: None,
//    arg_private_validators: None,
//    arg_private_account: None,
//    arg_private_sstore_url: None,
//    arg_private_sstore_threshold: None,
//    arg_private_passwords: None,
//    arg_ui_path: "$BASE/signer".to_string(),
//    flag_no_warp: false,
//    flag_no_discovery: false,
//    flag_reserved_only: false,
//    flag_no_ancient_blocks: false,
//    flag_no_serve_light: false,
//    arg_warp_barrier: None,
//    arg_port: 30303,
//    arg_interface: "all".to_string(),
//    arg_min_peers: None,
//    arg_max_peers: None,
//    arg_snapshot_peers: 0,
//    arg_nat: "any".to_string(),
//    arg_allow_ips: "all".to_string(),
//    arg_max_pending_peers: 64,
//    arg_network_id: None,
//    arg_bootnodes: None,
//    arg_node_key: None,
//    arg_reserved_peers: None,
//    flag_jsonrpc_allow_missing_blocks: false,
//    flag_no_jsonrpc: false,
//    flag_jsonrpc_no_keep_alive: false,
//    flag_jsonrpc_experimental: false,
//    arg_jsonrpc_port: 8545,
//    arg_jsonrpc_interface: "local".to_string(),
//    arg_jsonrpc_apis: "web3,eth,pubsub,net,parity,private,parity_pubsub,traces,rpc,parity_transactions_pool".to_string(),
//    arg_jsonrpc_hosts: "none".to_string(),
//    arg_jsonrpc_threads: 4,
//    arg_jsonrpc_cors: "none".to_string(),
//    arg_jsonrpc_server_threads: None,
//    arg_jsonrpc_max_payload: None,
//    arg_poll_lifetime: 60,
//    flag_no_ws: false,
//    arg_ws_port: 8546,
//    arg_ws_interface: "local".to_string(),
//    arg_ws_apis: "web3,eth,pubsub,net,parity,parity_pubsub,private,traces,rpc,parity_transactions_pool".to_string(),
//    arg_ws_origins: "parity://*,chrome-extension://*,moz-extension://*".to_string(),
//    arg_ws_hosts: "none".to_string(),
//    arg_ws_max_connections: 100,
//    flag_no_ipc: false,
//    arg_ipc_path: "$BASE/jsonrpc.ipc".to_string(),
//    arg_ipc_apis: "web3,eth,pubsub,net,parity,parity_pubsub,parity_accounts,private,traces,rpc,parity_transactions_pool".to_string(),
//    flag_ipfs_api: false,
//    arg_ipfs_api_port: 5001,
//    arg_ipfs_api_interface: "local".to_string(),
//    arg_ipfs_api_hosts: "none".to_string(),
//    arg_ipfs_api_cors: "none".to_string(),
//    arg_on_demand_response_time_window: None,
//    arg_on_demand_request_backoff_start: None,
//    arg_on_demand_request_backoff_max: None,
//    arg_on_demand_request_backoff_rounds_max: None,
//    arg_on_demand_request_consecutive_failures: None,
//    flag_no_secretstore: false,
//    flag_no_secretstore_http: false,
//    flag_no_secretstore_auto_migrate: false,
//    arg_secretstore_http_cors: "none".to_string(),
//    arg_secretstore_acl_contract: Some("registry".to_string()),
//    arg_secretstore_contract: None,
//    arg_secretstore_srv_gen_contract: None,
//    arg_secretstore_srv_retr_contract: None,
//    arg_secretstore_doc_store_contract: None,
//    arg_secretstore_doc_sretr_contract: None,
//    arg_secretstore_nodes: "".to_string(),
//    arg_secretstore_server_set_contract: Some("registry".to_string()),
//    arg_secretstore_interface: "local".to_string(),
//    arg_secretstore_port: 8083,
//    arg_secretstore_http_interface: "local".to_string(),
//    arg_secretstore_http_port: 8082,
//    arg_secretstore_path: "$BASE/secretstore".to_string(),
//    arg_secretstore_secret: None,
//    arg_secretstore_admin_public: None,
//    flag_force_sealing: false,
//    flag_reseal_on_uncle: false,
//    flag_remove_solved: false,
//    flag_tx_queue_no_unfamiliar_locals: false,
//    flag_tx_queue_no_early_reject: false,
//    flag_refuse_service_transactions: false,
//    flag_infinite_pending_block: false,
//    flag_no_persistent_txqueue: false,
//    flag_stratum: false,
//    arg_reseal_on_txs: "own".to_string(),
//    arg_reseal_min_period: 2000,
//    arg_reseal_max_period: 120000,
//    arg_work_queue_size: 20,
//    arg_relay_set: "cheap".to_string(),
//    arg_usd_per_tx: "0.0001".to_string(),
//    arg_usd_per_eth: "auto".to_string(),
//    arg_price_update_period: "hourly".to_string(),
//    arg_gas_floor_target: "8000000".to_string(),
//    arg_gas_cap: "10000000".to_string(),
//    arg_tx_queue_mem_limit: 4,
//    arg_tx_queue_size: 8192,
//    arg_tx_queue_per_sender: None,
//    arg_tx_queue_locals: None,
//    arg_tx_queue_strategy: "gas_price".to_string(),
//    arg_stratum_interface: "local".to_string(),
//    arg_stratum_port: 8008,
//    arg_min_gas_price: None,
//    arg_gas_price_percentile: 50,
//    arg_author: None,
//    arg_engine_signer: None,
//    arg_tx_gas_limit: None,
//    arg_tx_time_limit: None,
//    arg_extra_data: None,
//    arg_notify_work: None,
//    arg_stratum_secret: None,
//    arg_max_round_blocks_to_import: 12,
//    flag_can_restart: false,
//    flag_no_color: false,
//    flag_version: false,
//    flag_no_config: false,
//    arg_logging: None,
//    arg_log_file: None,
//    flag_scale_verifiers: false,
//    arg_tracing: "auto".to_string(),
//    arg_pruning: "auto".to_string(),
//    arg_pruning_history: 64,
//    arg_pruning_memory: 32,
//    arg_cache_size_db: 128,
//    arg_cache_size_blocks: 8,
//    arg_cache_size_queue: 40,
//    arg_cache_size_state: 25,
//    arg_db_compaction: "auto".to_string(),
//    arg_fat_db: "auto".to_string(),
//    arg_cache_size: None,
//    arg_num_verifiers: None,
//    flag_no_seal_check: false,
//    flag_no_periodic_snapshot: false,
//    arg_snapshot_threads: None,
//    flag_whisper: false,
//    arg_whisper_pool_size: None,
//    flag_geth: false,
//    flag_import_geth_keys: false,
//    flag_warp: false,
//    flag_jsonrpc: false,
//    flag_rpc: false,
//    flag_jsonrpc_off: false,
//    flag_webapp: false,
//    flag_dapps_off: false,
//    flag_ipcdisable: false,
//    flag_ipc_off: false,
//    flag_testnet: false,
//    flag_nodiscover: false,
//    flag_dapps_apis_all: false,
//    flag_public_node: false,
//    flag_force_ui: false,
//    flag_no_ui: false,
//    flag_ui_no_validation: false,
//    flag_fast_and_loose: false,
//    flag_no_dapps: false,
//    arg_etherbase: None,
//    arg_extradata: None,
//    arg_datadir: None,
//    arg_networkid: None,
//    arg_peers: None,
//    arg_nodekey: None,
//    arg_rpcaddr: None,
//    arg_rpcport: None,
//    arg_rpcapi: None,
//    arg_rpccorsdomain: None,
//    arg_ipcapi: None,
//    arg_ipcpath: None,
//    arg_gasprice: None,
//    arg_cache: None,
//    arg_dapps_port: None,
//    arg_dapps_interface: None,
//    arg_dapps_hosts: None,
//    arg_dapps_cors: None,
//    arg_dapps_user: None,
//    arg_dapps_pass: None,
//    arg_ui_interface: None,
//    arg_ui_hosts: None,
//    arg_ui_port: None,
//    arg_tx_queue_ban_count: None,
//    arg_tx_queue_ban_time: None,
//    arg_dapps_path: None,
//    arg_ntp_servers: None
//  };
//  let mut new_args: Vec<String> = vec![];
//  for i in 0..args.len() {
//    if !removed.contains(&i) {
//      new_args.push(args.get(i).unwrap().to_string());
//    }
//  }
//  return (Configuration { args: conf_args}, new_args);
//}

fn run() -> cli::error::Result<()> {
  let args: Vec<String> = ::std::env::args().collect();
//  let (eth_conf, new_args) = parse_cli(args);

  // start ethereum light client
//  thread::spawn(|| {
//    Ethereum::run(eth_conf);
//  });
  
  // start substrate
  let version = VersionInfo {
    name: "Substrate Node",
    commit: env!("VERGEN_SHA_SHORT"),
    version: env!("CARGO_PKG_VERSION"),
    executable_name: "daqiao",
    author: "altxin.io",
    description: "DaQiao",
    support_url: "support.anonymous.an",
  };
//  cli::run(new_args, cli::Exit, version)
  cli::run(args, cli::Exit, version)
}

error_chain::quick_main!(run);
